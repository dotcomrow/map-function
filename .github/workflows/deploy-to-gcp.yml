name: 'Terraform'

on:
  push:
    branches: [ "deploy" ]
  pull_request:

permissions:
  contents: read

jobs:
  pullDependencies:
    name: 'Pull Dependencies'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: pullDependencies
        run: |-
          pip3 install -r ./src/requirements.txt --target ./src

  replaceValues:
    name: 'Replace Values'
    needs: pullDependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "<PROJECT_NAME>"
          replace: ${{ vars.GCP_PROJECT }}
          regex: false

      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "<YOUR-PROJECT-ID>"
          replace: ${{ vars.GCP_PROJECT_ID }}
          regex: false

      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "<REGION>"
          replace: ${{ vars.GCP_REGION }}
          regex: false

  terraform:
    name: 'Terraform'
    needs: replaceValues
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Setup terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        region="${{ vars.GCP_REGION }}" 
        project="${{ vars.GCP_PROJECT }}" 
        EOF
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }} 


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}