name: 'Terraform'

on:
  push:
    branches: [ "deploy" ]
    
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: 'Pull Dependencies'
      run: |-
            pip3 install -r ../src/requirements.txt --target ../src

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Find and Replace
      uses: jacobtomlinson/gha-find-replace@v3
      with:
          find: "<PROJECT_NAME>"
          replace: ${{ vars.GCP_PROJECT }}
          regex: false

    - name: Find and Replace
      uses: jacobtomlinson/gha-find-replace@v3
      with:
          find: "<YOUR-PROJECT-ID>"
          replace: ${{ vars.GCP_PROJECT_ID }}
          regex: false

    - name: Find and Replace
      uses: jacobtomlinson/gha-find-replace@v3
      with:
          find: "<REGION>"
          replace: ${{ vars.GCP_REGION }}
          regex: false

    - name: Writing Google key
      uses: mobiledevops/secret-to-file-action@v1
      with:
          base64-encoded-secret: ${{ secrets.GOOGLE_CREDENTIALS }}
          filename: "./terraform/google.key"
          is-executable: false

    - name: Copy Src
      run: |
        mkdir ./src
        mv ../src ./src

    - name: Setup terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        region="${{ vars.GCP_REGION }}" 
        project="${{ vars.GCP_PROJECT }}" 
        EOF
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
    

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/deploy' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false